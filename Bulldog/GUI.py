# ------------------------------------------------------------------------------------------
# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'F:\Cyber\Bulldog\gui\expiremental.ui'
#
# Created by: PyQt4 UI code generator 4.11.4
#
# WARNING! All changes made in this file will be lost!

"""
This file contains all the GUI elements for Bulldog.
It was mostly generated by Qt Designer and code generator, and manipulated by me to fit the needs of the project.
"""


import sys
from PyQt4 import QtCore, QtGui
from time import sleep
from networking import *
from threading import Thread
import os

try:
    _fromUtf8 = QtCore.QString.fromUtf8
except AttributeError:
    def _fromUtf8(s):
        return s

try:
    _encoding = QtGui.QApplication.UnicodeUTF8

    def _translate(context, text, disambig):
        return QtGui.QApplication.translate(context, text, disambig, _encoding)
except AttributeError:
    def _translate(context, text, disambig):
        return QtGui.QApplication.translate(context, text, disambig)

# ------------------------------------------------------------------------------------------

# EncryptionWindow constants:
TRANSPARENT_BG_IMAGE = "image: rgba(255, 255, 255, 0);"
ENCRYPTION_TAB_TEXT = "Select the encryption type for the chosen files:"
AES_EXPLANATION = "AES- Advanced Encryption Standard.\nStrong, reliable encryption, considered the " \
                  "standard by the U.S. government.\nConsidered slow.Recommended for small or medium sized files."
BLOWFISH_EXPLANATION = "Blowfish- Not as reliable as the AES, but still one of the best\n" \
                       "encryption methods.\nIt is very fast and effective.\nHighly recommended for large" \
                       " files with lots of _data."
TDES_EXPLANATION = "Triple DES- Considered slow, but provides extra security,\n" \
                   "as it uses three keys, Recommended for small, important files"
AUTHENTICATION_TEXT = "Please log in to the system, so the encryption could be completed:"
FILE_CHOOSING_TAB_TEXT = "Select the files which should be encrypted:"
BULLDOG_BG_IMAGE = "image: url(:/images/bulldog_transperant.png);"
GREY_BACKGROUND = "background-color: rgb(240, 240, 240, 180);"
WHITE_BACKGROUND = "background-color: rgba(255, 255, 255, 255);"
MODE_AES = 1
MODE_BLOWFISH = 2
MODE_TDES = 3

# LoginWindow constants:
LOGIN_FAILED_TITLE = "Login Failed"
LOGIN_FAILED_TEXT = "Wrong username or password.\nPlease try again."
DEFAULT_INFO_WINDOW_TITLE = "Information"
EXCEPTION_DISPLAYING_FORMAT = "Exception of type %s\nOn file %s, in function %s, at line %d:\n\n%s"
OPERATION_WINDOW_TEXT = "%s\nPlease do not close the program or turn of the system..."
OPERATION_WINDOW_TITLE = "Please wait..."


def login_failed_popup():
    """
    This function will create a popup window which tells the user he entered a wrong username or password using the
    QtGui.QMessageBox class.
    :return: None
    """
    popup = QtGui.QMessageBox()

    popup.setWindowTitle(_fromUtf8(LOGIN_FAILED_TITLE))
    popup.setStandardButtons(QtGui.QMessageBox.Ok)
    popup.setIcon(QtGui.QMessageBox.Information)
    popup.setText(_fromUtf8(LOGIN_FAILED_TEXT))

    popup.exec_()


def create_popup_message_box(**kwargs):
    """
    This function will create a QMessageBox object which will display a message for the user.
    :param kwargs: The message box's properties.
    :return: QMessageBox object with the given properties.
    """
    popup = QtGui.QMessageBox()

    given_properties = kwargs.keys()
    if 'title' in given_properties:
        popup.setWindowTitle(_fromUtf8(kwargs['title']))
    else:
        popup.setWindowTitle(DEFAULT_INFO_WINDOW_TITLE)

    if 'buttons' in given_properties:
        popup.setStandardButtons(kwargs['buttons'])
    else:
        popup.setStandardButtons(QtGui.QMessageBox.Ok)

    if 'icon' in given_properties:
        popup.setIcon(kwargs['icon'])
    else:
        popup.setIcon(QtGui.QMessageBox.Information)

    if 'text' in given_properties:
        popup.setText(_fromUtf8(kwargs['text']))

    if 'details' in given_properties:
        popup.setDetailedText(_fromUtf8(kwargs['details']))

    return popup


def launch_popup_message_box(**kwargs):
    """
    This function will construct a PyQt application and will display a popup message created using the
    'create_popup_message' function.
    :param kwargs: The properties of the QMessageBox.
    :return: None
    """
    app = QtGui.QApplication(sys.argv)

    message_box = create_popup_message_box(**kwargs)
    message_box.exec_()

    del app


def create_error_message(exception):
    """
    This function will create a QErrorMessage object which will display a message for the user.
    :param exception: The exception which caused the error in the program.
    :type exception: __builtin__.Exception
    :return: QErrorMessage object which specifies the given error.
    """
    message = QtGui.QMessageBox()

    message.setStandardButtons(QtGui.QMessageBox.Ok)
    message.setIcon(QtGui.QMessageBox.Warning)
    message.setWindowTitle(_fromUtf8("Error"))
    message.setText(_fromUtf8("An error occurred during the process."))
    message.setDetailedText(_fromUtf8(exception.message))

    exc_type, exc_value, exc_traceback = sys.exc_info()  # most recent (if any) by default

    '''
    Reason this _can_ be bad: If an (unhandled) exception happens AFTER this,
    or if we do not delete the labels on (not much) older versions of Py, the
    reference we created can linger.

    traceback.format_exc/print_exc do this very thing, BUT note this creates a
    temp scope within the function.
    '''

    traceback_details = {
                         'filename': exc_traceback.tb_frame.f_code.co_filename,
                         'lineno': exc_traceback.tb_lineno,
                         'name': exc_traceback.tb_frame.f_code.co_name,
                         'type': exc_type.__name__,
                         'message': exc_value.message  # or see traceback._some_str()
                        }

    message.setDetailedText(_fromUtf8(EXCEPTION_DISPLAYING_FORMAT % (traceback_details['type'],
                                                                     traceback_details['filename'],
                                                                     traceback_details['name'],
                                                                     traceback_details['lineno'],
                                                                     traceback_details['message'])))

    del(exc_type, exc_value, exc_traceback)  # So we don't leave our local labels/objects dangling
    # This still isn't "completely safe", though!
    # "Best (recommended) practice: replace all exc_type, exc_value, exc_traceback
    # with sys.exc_info()[0], sys.exc_info()[1], sys.exc_info()[2]

    return message


def launch_error_message(exception):
    """
    This function will construct a PyQt application and will display a popup message created using the
    'create_error_message' function.
    :param exception: The exception which caused the error.
    :return: None
    """
    app = QtGui.QApplication(sys.argv)
    message = create_error_message(exception)
    message.exec_()

    del app


def error_handler(func):
    """
    This function will serve as a decorator for functions on the client side.
    It will popup an error message when an unhandled error occurs , and will supply info about the error.
    :param func: The function which might raise an error.
    """
    def error_handling(*args, **kwargs):
        try:
            return func(*args, **kwargs)
        except Exception as ex:
            launch_error_message(ex)

    return error_handling


class Task(object):
    """
    This class wil describe which files should be encrypted and how.
    It's purpose is to send this information from the GUI window to the program operating it. It allows the programmer
    to distinct the GUI from the communication with the server and the encryption by allowing him to access all the
    information needed from the GUI through this class.
    """
    def __init__(self, method, username, password, path):
        """
        :param method: The selected encryption method.
        :param username: The selected username.
        :param password: The selected password.
        :param path: The selected path.
        """
        self.method = method
        self.username = username
        self.password = password
        self.path = path

    def __str__(self):
        return "method: %s\npath: %s\nusername: %s\npassword: %s" % (self.method, self.path, self.username,
                                                                     self.password)


class EncryptionWindow(QtGui.QMainWindow):
    def __init__(self, path):
        super(EncryptionWindow, self).__init__()

        self.selected_path = path
        self.task = None
        self.setup_ui()

    def setup_ui(self):
        """
        Sets up all of the graphic elements in the main window.
        :return: None
        """
        self.setObjectName(_fromUtf8("Bulldog- Encrypt"))
        self.resize(550, 360)
        size_policy = QtGui.QSizePolicy(QtGui.QSizePolicy.Preferred, QtGui.QSizePolicy.Preferred)
        size_policy.setHorizontalStretch(0)
        size_policy.setVerticalStretch(0)
        size_policy.setHeightForWidth(self.sizePolicy().hasHeightForWidth())
        self.setSizePolicy(size_policy)
        self.setMinimumSize(QtCore.QSize(550, 360))
        self.setStyleSheet(_fromUtf8(""))
        self.setDocumentMode(False)
        self.setTabShape(QtGui.QTabWidget.Rounded)
        self.centralwidget = QtGui.QWidget(self)
        self.centralwidget.setObjectName(_fromUtf8("centralwidget"))
        self.horizontalLayout_2 = QtGui.QHBoxLayout(self.centralwidget)
        self.horizontalLayout_2.setObjectName(_fromUtf8("horizontalLayout_2"))

        # Setting the tab widget:
        self.tab_widget = QtGui.QTabWidget(self.centralwidget)
        self.tab_widget.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.tab_widget.setTabPosition(QtGui.QTabWidget.North)
        self.tab_widget.setTabShape(QtGui.QTabWidget.Rounded)
        self.tab_widget.setElideMode(QtCore.Qt.ElideLeft)
        self.tab_widget.setUsesScrollButtons(False)
        self.tab_widget.setDocumentMode(True)
        self.tab_widget.setObjectName(_fromUtf8("tab_widget"))

        # Setting the first tab- file selection tab:
        self.file_selection = QtGui.QWidget()
        self.file_selection.setObjectName(_fromUtf8("file_selection"))
        self.verticalLayout = QtGui.QVBoxLayout(self.file_selection)
        self.verticalLayout.setObjectName(_fromUtf8("verticalLayout"))
        spacerItem = QtGui.QSpacerItem(20, 13, QtGui.QSizePolicy.Minimum, QtGui.QSizePolicy.Fixed)
        self.verticalLayout.addItem(spacerItem)
        self.file_selection_label = QtGui.QLabel(self.file_selection)
        self.file_selection_label.setObjectName(_fromUtf8("file_selection_label"))
        self.verticalLayout.addWidget(self.file_selection_label)
        spacerItem1 = QtGui.QSpacerItem(20, 20, QtGui.QSizePolicy.Minimum, QtGui.QSizePolicy.Fixed)
        self.verticalLayout.addItem(spacerItem1)

        # Set up the file- selecting tree widget:
        if os.path.isdir(self.selected_path):
            self.model = QtGui.QFileSystemModel(self.file_selection)
            self.model.setRootPath(_fromUtf8(self.selected_path))
            self.file_selector = QtGui.QTreeView(self.file_selection)
            self.file_selector.setModel(self.model)
            self.file_selector.setRootIndex(self.model.index(self.model.rootPath()))
            self.file_selector.setObjectName(_fromUtf8("file_selector"))
            self.verticalLayout.addWidget(self.file_selector)
        else:
            self.file_selector = self.username_edit = QtGui.QLineEdit(self.file_selection)
            self.file_selector.setText(_fromUtf8(self.selected_path))
            self.file_selector.setReadOnly(True)
            self.verticalLayout.addWidget(self.file_selector)
            single_file_spacer = QtGui.QSpacerItem(20, 20, QtGui.QSizePolicy.Preferred, QtGui.QSizePolicy.Expanding)
            self.verticalLayout.addItem(single_file_spacer)

        spacerItem2 = QtGui.QSpacerItem(20, 13, QtGui.QSizePolicy.Minimum, QtGui.QSizePolicy.Fixed)
        self.verticalLayout.addItem(spacerItem2)
        self.button_box_1 = QtGui.QHBoxLayout()
        self.button_box_1.setObjectName(_fromUtf8("button_box_1"))
        spacerItem3 = QtGui.QSpacerItem(40, 20, QtGui.QSizePolicy.Expanding, QtGui.QSizePolicy.Minimum)
        self.button_box_1.addItem(spacerItem3)
        self.cancel_button_1 = QtGui.QPushButton(self.file_selection)
        self.cancel_button_1.setObjectName(_fromUtf8("cancel_button_1"))
        self.button_box_1.addWidget(self.cancel_button_1)
        self.next_button_1 = QtGui.QPushButton(self.file_selection)
        self.next_button_1.setObjectName(_fromUtf8("next_button_1"))
        self.button_box_1.addWidget(self.next_button_1)
        self.verticalLayout.addLayout(self.button_box_1)
        self.tab_widget.addTab(self.file_selection, _fromUtf8(""))

        # Setting up the second tab- the encryption method tab:
        self.encryption_selection = QtGui.QWidget()
        self.encryption_selection.setObjectName(_fromUtf8("encryption_selection"))
        self.verticalLayout_2 = QtGui.QVBoxLayout(self.encryption_selection)
        self.verticalLayout_2.setObjectName(_fromUtf8("verticalLayout_2"))
        spacerItem4 = QtGui.QSpacerItem(20, 40, QtGui.QSizePolicy.Minimum, QtGui.QSizePolicy.Expanding)
        self.verticalLayout_2.addItem(spacerItem4)
        self.encryption_label = QtGui.QLabel(self.encryption_selection)
        self.encryption_label.setObjectName(_fromUtf8("encryption_label"))
        self.verticalLayout_2.addWidget(self.encryption_label)
        spacerItem5 = QtGui.QSpacerItem(20, 20, QtGui.QSizePolicy.Minimum, QtGui.QSizePolicy.Fixed)
        self.verticalLayout_2.addItem(spacerItem5)
        self.AES_layout = QtGui.QHBoxLayout()
        self.AES_layout.setObjectName(_fromUtf8("AES_layout"))
        spacerItem6 = QtGui.QSpacerItem(40, 20, QtGui.QSizePolicy.Fixed, QtGui.QSizePolicy.Minimum)
        self.AES_layout.addItem(spacerItem6)
        self.AES_button = QtGui.QRadioButton(self.encryption_selection)
        self.AES_button.setObjectName(_fromUtf8("AES_button"))
        self.AES_layout.addWidget(self.AES_button)
        self.verticalLayout_2.addLayout(self.AES_layout)
        self.blowfish_layout = QtGui.QHBoxLayout()
        self.blowfish_layout.setObjectName(_fromUtf8("blowfish_layout"))
        spacerItem7 = QtGui.QSpacerItem(40, 20, QtGui.QSizePolicy.Fixed, QtGui.QSizePolicy.Minimum)
        self.blowfish_layout.addItem(spacerItem7)
        self.blowfish_button = QtGui.QRadioButton(self.encryption_selection)
        self.blowfish_button.setObjectName(_fromUtf8("blowfish_button"))
        self.blowfish_layout.addWidget(self.blowfish_button)
        self.verticalLayout_2.addLayout(self.blowfish_layout)
        self.TDES_layout = QtGui.QHBoxLayout()
        self.TDES_layout.setObjectName(_fromUtf8("TDES_layout"))
        spacerItem8 = QtGui.QSpacerItem(40, 20, QtGui.QSizePolicy.Fixed, QtGui.QSizePolicy.Minimum)
        self.TDES_layout.addItem(spacerItem8)
        self.TDES_button = QtGui.QRadioButton(self.encryption_selection)
        self.TDES_button.setObjectName(_fromUtf8("TDES_button"))
        # self.TDES_layout.addWidget(self.TDES_button)
        self.TDES_button.setDisabled(True)  #TODO: Fix TDES encryption
        self.verticalLayout_2.addLayout(self.TDES_layout)
        spacerItem9 = QtGui.QSpacerItem(20, 40, QtGui.QSizePolicy.Minimum, QtGui.QSizePolicy.Expanding)
        self.verticalLayout_2.addItem(spacerItem9)
        self.button_box_2 = QtGui.QHBoxLayout()
        self.button_box_2.setObjectName(_fromUtf8("button_box_2"))
        spacerItem10 = QtGui.QSpacerItem(40, 20, QtGui.QSizePolicy.Expanding, QtGui.QSizePolicy.Minimum)
        self.button_box_2.addItem(spacerItem10)
        self.back_button_1 = QtGui.QPushButton(self.file_selection)
        self.back_button_1.setObjectName(_fromUtf8("back_button_1"))
        self.button_box_2.addWidget(self.back_button_1)
        self.cancel_button_2 = QtGui.QPushButton(self.encryption_selection)
        self.cancel_button_2.setObjectName(_fromUtf8("cancel_button_2"))
        self.button_box_2.addWidget(self.cancel_button_2)
        self.next_button_2 = QtGui.QPushButton(self.encryption_selection)
        self.next_button_2.setObjectName(_fromUtf8("next_button_2"))
        self.button_box_2.addWidget(self.next_button_2)
        self.verticalLayout_2.addLayout(self.button_box_2)
        self.tab_widget.addTab(self.encryption_selection, _fromUtf8(""))

        # Setting up the third tab- authentication tab:
        self.authentication = QtGui.QWidget()
        self.authentication.setObjectName(_fromUtf8("authentication"))
        self.verticalLayout_3 = QtGui.QVBoxLayout(self.authentication)
        self.verticalLayout_3.setObjectName(_fromUtf8("verticalLayout_3"))
        spacerItem11 = QtGui.QSpacerItem(20, 40, QtGui.QSizePolicy.Minimum, QtGui.QSizePolicy.Fixed)
        self.verticalLayout_3.addItem(spacerItem11)
        self.auth_label = QtGui.QLabel(self.authentication)
        self.auth_label.setObjectName(_fromUtf8("auth_label"))
        self.verticalLayout_3.addWidget(self.auth_label)
        spacerItem12 = QtGui.QSpacerItem(20, 20, QtGui.QSizePolicy.Minimum, QtGui.QSizePolicy.Fixed)
        self.verticalLayout_3.addItem(spacerItem12)
        self.username_layout = QtGui.QHBoxLayout()
        self.username_layout.setObjectName(_fromUtf8("username_layout"))
        spacerItem13 = QtGui.QSpacerItem(40, 20, QtGui.QSizePolicy.Expanding, QtGui.QSizePolicy.Minimum)
        self.username_layout.addItem(spacerItem13)
        self.username_label = QtGui.QLabel(self.authentication)
        self.username_label.setObjectName(_fromUtf8("username_label"))
        self.username_layout.addWidget(self.username_label)
        spacerItem14 = QtGui.QSpacerItem(40, 20, QtGui.QSizePolicy.Fixed, QtGui.QSizePolicy.Minimum)
        self.username_layout.addItem(spacerItem14)
        self.username_edit = QtGui.QLineEdit(self.authentication)
        self.username_edit.setObjectName(_fromUtf8("username_edit"))
        self.username_layout.addWidget(self.username_edit)
        spacerItem15 = QtGui.QSpacerItem(40, 20, QtGui.QSizePolicy.Expanding, QtGui.QSizePolicy.Minimum)
        self.username_layout.addItem(spacerItem15)
        self.verticalLayout_3.addLayout(self.username_layout)
        spacerItem16 = QtGui.QSpacerItem(20, 10, QtGui.QSizePolicy.Minimum, QtGui.QSizePolicy.Fixed)
        self.verticalLayout_3.addItem(spacerItem16)
        self.password_layout = QtGui.QHBoxLayout()
        self.password_layout.setObjectName(_fromUtf8("password_layout"))
        spacerItem17 = QtGui.QSpacerItem(40, 20, QtGui.QSizePolicy.Expanding, QtGui.QSizePolicy.Minimum)
        self.password_layout.addItem(spacerItem17)
        self.password_label = QtGui.QLabel(self.authentication)
        self.password_label.setObjectName(_fromUtf8("password_label"))
        self.password_layout.addWidget(self.password_label)
        spacerItem18 = QtGui.QSpacerItem(40, 20, QtGui.QSizePolicy.Fixed, QtGui.QSizePolicy.Minimum)
        self.password_layout.addItem(spacerItem18)
        self.password_input = QtGui.QLineEdit(self.authentication)
        self.password_input.setFrame(True)
        self.password_input.setEchoMode(QtGui.QLineEdit.Password)
        self.password_input.setObjectName(_fromUtf8("password_input"))
        self.password_layout.addWidget(self.password_input)
        spacerItem19 = QtGui.QSpacerItem(40, 20, QtGui.QSizePolicy.Expanding, QtGui.QSizePolicy.Minimum)
        self.password_layout.addItem(spacerItem19)
        self.verticalLayout_3.addLayout(self.password_layout)
        spacerItem20 = QtGui.QSpacerItem(20, 40, QtGui.QSizePolicy.Minimum, QtGui.QSizePolicy.Expanding)
        self.verticalLayout_3.addItem(spacerItem20)
        self.button_box_3 = QtGui.QHBoxLayout()
        self.button_box_3.setObjectName(_fromUtf8("button_box_3"))
        spacerItem21 = QtGui.QSpacerItem(40, 20, QtGui.QSizePolicy.Expanding, QtGui.QSizePolicy.Minimum)
        self.button_box_3.addItem(spacerItem21)
        self.back_button_2 = QtGui.QPushButton(self.file_selection)
        self.back_button_2.setObjectName(_fromUtf8("back_button_1"))
        self.button_box_3.addWidget(self.back_button_2)

        self.cancel_button_3 = QtGui.QPushButton(self.authentication)
        self.cancel_button_3.setObjectName(_fromUtf8("cancel_button_3"))
        self.button_box_3.addWidget(self.cancel_button_3)
        self.finish_button = QtGui.QPushButton(self.authentication)
        self.finish_button.setObjectName(_fromUtf8("finish_button"))
        self.button_box_3.addWidget(self.finish_button)
        self.verticalLayout_3.addLayout(self.button_box_3)
        self.tab_widget.addTab(self.authentication, _fromUtf8(""))
        self.horizontalLayout_2.addWidget(self.tab_widget)
        self.setCentralWidget(self.centralwidget)
        self.username_label.setBuddy(self.username_edit)
        self.password_label.setBuddy(self.password_input)

        # Final adjustments:
        self.retranslate_ui()
        self.connect_slots_and_signals()

        self.tab_widget.setCurrentIndex(0)

    def connect_slots_and_signals(self):
        """
        Connects the buttons and other events to functions.
        :return: None
        """
        QtCore.QObject.connect(self.cancel_button_1, QtCore.SIGNAL(_fromUtf8("clicked()")), self.close)
        QtCore.QObject.connect(self.cancel_button_2, QtCore.SIGNAL(_fromUtf8("clicked()")), self.close)
        QtCore.QObject.connect(self.cancel_button_3, QtCore.SIGNAL(_fromUtf8("clicked()")), self.close)
        QtCore.QObject.connect(self.finish_button, QtCore.SIGNAL(_fromUtf8("clicked()")), self.handle_finish_button)
        QtCore.QObject.connect(self.next_button_1, QtCore.SIGNAL(_fromUtf8("clicked()")), self.next_page)
        QtCore.QObject.connect(self.next_button_2, QtCore.SIGNAL(_fromUtf8("clicked()")), self.next_page)
        QtCore.QObject.connect(self.back_button_1, QtCore.SIGNAL(_fromUtf8("clicked()")), self.previous_page)
        QtCore.QObject.connect(self.back_button_2, QtCore.SIGNAL(_fromUtf8("clicked()")), self.previous_page)

        QtCore.QMetaObject.connectSlotsByName(self)

    def retranslate_ui(self):
        """
        This function was built by the code generator. It displays the text in the various graphic elements.
        :return: None
        """
        self.setWindowTitle(_translate("MainWindow", "Bulldog- Encrypt", None))
        self.file_selection_label.setText(_translate("MainWindow", FILE_CHOOSING_TAB_TEXT, None))
        self.file_selection_label.setStyleSheet(_fromUtf8(GREY_BACKGROUND))

        self.cancel_button_1.setText(_translate("MainWindow", "Cancel", None))
        self.next_button_1.setText(_translate("MainWindow", "Next", None))
        self.tab_widget.setTabText(self.tab_widget.indexOf(self.file_selection), _translate("MainWindow", "Step 1", None))
        self.encryption_label.setText(_translate("MainWindow", ENCRYPTION_TAB_TEXT, None))
        self.encryption_label.setStyleSheet(_fromUtf8(GREY_BACKGROUND))
        self.AES_button.setText(_translate("MainWindow", AES_EXPLANATION, None))
        self.blowfish_button.setText(_translate("MainWindow", BLOWFISH_EXPLANATION, None))
        self.TDES_button.setText(_translate("MainWindow", TDES_EXPLANATION, None))
        self.back_button_1.setText(_translate("MainWindow", "Back", None))
        self.cancel_button_2.setText(_translate("MainWindow", "Cancel", None))
        self.next_button_2.setText(_translate("MainWindow", "Next", None))
        self.tab_widget.setTabText(self.tab_widget.indexOf(self.encryption_selection), _translate("MainWindow",
                                                                                                  "Step 2", None))
        self.auth_label.setText(_translate("MainWindow", AUTHENTICATION_TEXT, None))
        self.auth_label.setStyleSheet(_fromUtf8(GREY_BACKGROUND))
        self.username_label.setText(_translate("MainWindow", "Username:", None))
        self.username_label.setStyleSheet(_fromUtf8(GREY_BACKGROUND))
        self.password_label.setText(_translate("MainWindow", "Password:", None))
        self.password_label.setStyleSheet(_fromUtf8(GREY_BACKGROUND))
        self.back_button_2.setText(_translate("MainWindow", "Back", None))
        self.cancel_button_3.setText(_translate("MainWindow", "Cancel", None))
        self.finish_button.setText(_translate("MainWindow", "Finish", None))
        self.tab_widget.setTabText(self.tab_widget.indexOf(self.authentication),
                                   _translate("MainWindow", "Step 3", None))

    def next_page(self):
        """
        This function should be paired with the 'next' button. It will move the tab widget to the next tab.
        """
        if self.tab_widget.currentIndex() == 1:
            if self.AES_button.isChecked() or self.TDES_button.isChecked() or self.blowfish_button.isChecked():
                self.tab_widget.setCurrentIndex(self.tab_widget.currentIndex() + 1)
            else:
                # TODO: Can't go to next page popup here
                pass
        else:
            self.tab_widget.setCurrentIndex(self.tab_widget.currentIndex() + 1)

    def previous_page(self):
        """
        This function should be paired with the 'back' button. It will move the tab widget to the previous tab.
        """
        self.tab_widget.setCurrentIndex(self.tab_widget.currentIndex() - 1)

    def handle_finish_button(self):
        """
        This function should be paired with the 'finis' button. It will close the window safely and will create the task
        object which describes the user encryption request.
        """
        if len(self.username_edit.text()) == 0 or len(self.password_input.text()) == 0:
            # TODO: 'Please enter username and password' popup
            return
        else:
            encryption_method = 0
            if self.AES_button.isChecked():
                encryption_method = MODE_AES
            elif self.blowfish_button.isChecked():
                encryption_method = MODE_BLOWFISH
            elif self.TDES_button.isChecked():
                encryption_method = MODE_TDES
            self.task = Task(encryption_method, self.username_edit.text(), self.password_input.text(), self.selected_path)
            self.close()


class OperationWindow(QtGui.QMessageBox):
    """
    This class will present a window which indicates the program is currently performing an operation which requires the
    user to wait until its done.
    """
    operation_done = QtCore.pyqtSignal(name='operationDone')

    def __init__(self, text, operation, *args, **kwargs):
        super(OperationWindow, self).__init__()

        self.setup_ui(text)

        self.task = operation
        self.operation_parameters = args
        if len(kwargs) != 0:
            self.operation_key_parameters = kwargs
        else:
            self.operation_key_parameters = None
        self.return_value = None

        self.operation_done.connect(self.close)

    def operation(self, *args, **kwargs):
        self.return_value = self.task(*args, **kwargs)
        self.operation_done.emit()

    def setup_ui(self, text):
        """
        This function will set up the
        :param text: str. The text which should be displayed as the message.
        :return: None
        """
        self.setWindowTitle(_fromUtf8(OPERATION_WINDOW_TITLE))

        self.setStandardButtons(self.Cancel)

        self.setText(_fromUtf8(OPERATION_WINDOW_TEXT % text))

        self.buttons()[0].setEnabled(False)

    def perform_operation(self):
        threaded = Thread(target=self.operation, args=self.operation_parameters, kwargs=self.operation_key_parameters)
        threaded.start()

    def exec_(self):
        self.perform_operation()
        super(OperationWindow, self).exec_()
        return self.return_value


def blocking_operation(func):
    """
    This function will wrap functions which block the GUI. Instead of blocking, the created function will display a
    responding window which will inform the user of the blocking.
    :param func: The function which will block the GUI and should be executed.
    :type func:  callable
    :return: The return value of 'func'.
    """
    def nonblocking_operation_window(text, *args, **kwargs):
        """
        This function will run the wrapped function 'func' without blocking, through an OperationWindow.
        :param text: The text which should be displayed while the operation is being performed.
        :type text: str
        :return: The return value of 'func'.
        """
        app = QtGui.QApplication(sys.argv)

        box = OperationWindow(text, func, *args, **kwargs)
        ret_val = box.exec_()
        del app

        return ret_val

    return nonblocking_operation_window


class LoginWindow(QtGui.QDialog):

    server_responded = QtCore.pyqtSignal(name='serverResponded')

    def __init__(self, server):
        """
        This function will construct a PyQt4 Dialog instance, which will include the custom gui elements of bulldog.
        :param server: socket.socket. The server socket, which the username request should be sent to.
        """
        super(LoginWindow, self).__init__()

        self.setup_ui()
        self.retranslate_ui()

        self.correct_username = self.username_edit.text()
        self.correct_password = self.password_edit.text()

        self.connect_slots_and_signals()

        self.user_id = -1

        self.server = server
        self.popup = None

    def setup_ui(self):
        """
        This function will set up all of the Pyqt4 GUI elements in the dialog window.
        :return: None
        """
        self.setObjectName(_fromUtf8("Login"))
        self.resize(350, 250)
        self.verticalLayout = QtGui.QVBoxLayout(self)
        self.verticalLayout.setObjectName(_fromUtf8("verticalLayout"))
        spacerItem = QtGui.QSpacerItem(20, 48, QtGui.QSizePolicy.Minimum, QtGui.QSizePolicy.Expanding)
        self.verticalLayout.addItem(spacerItem)
        self.info_line_2 = QtGui.QHBoxLayout()
        self.info_line_2.setObjectName(_fromUtf8("info_line_2"))
        spacerItem1 = QtGui.QSpacerItem(40, 20, QtGui.QSizePolicy.Fixed, QtGui.QSizePolicy.Minimum)
        self.info_line_2.addItem(spacerItem1)
        self.info_label = QtGui.QLabel(self)
        self.info_label.setObjectName(_fromUtf8("info_label"))
        self.info_line_2.addWidget(self.info_label)
        spacerItem2 = QtGui.QSpacerItem(40, 20, QtGui.QSizePolicy.Expanding, QtGui.QSizePolicy.Minimum)
        self.info_line_2.addItem(spacerItem2)
        self.verticalLayout.addLayout(self.info_line_2)
        spacerItem3 = QtGui.QSpacerItem(20, 72, QtGui.QSizePolicy.Minimum, QtGui.QSizePolicy.Expanding)
        self.verticalLayout.addItem(spacerItem3)
        self.username_line = QtGui.QHBoxLayout()
        self.username_line.setObjectName(_fromUtf8("username_line"))
        spacerItem4 = QtGui.QSpacerItem(40, 20, QtGui.QSizePolicy.Expanding, QtGui.QSizePolicy.Minimum)
        self.username_line.addItem(spacerItem4)
        self.username_label = QtGui.QLabel(self)
        self.username_label.setObjectName(_fromUtf8("username_label"))
        self.username_line.addWidget(self.username_label)
        spacerItem5 = QtGui.QSpacerItem(40, 20, QtGui.QSizePolicy.Expanding, QtGui.QSizePolicy.Minimum)
        self.username_line.addItem(spacerItem5)
        self.username_edit = QtGui.QLineEdit(self)
        self.username_edit.setObjectName(_fromUtf8("username_edit"))
        self.username_line.addWidget(self.username_edit)
        spacerItem6 = QtGui.QSpacerItem(40, 20, QtGui.QSizePolicy.Expanding, QtGui.QSizePolicy.Minimum)
        self.username_line.addItem(spacerItem6)
        self.verticalLayout.addLayout(self.username_line)
        spacerItem7 = QtGui.QSpacerItem(20, 10, QtGui.QSizePolicy.Minimum, QtGui.QSizePolicy.Fixed)
        self.verticalLayout.addItem(spacerItem7)
        self.password_line = QtGui.QHBoxLayout()
        self.password_line.setObjectName(_fromUtf8("password_line"))
        spacerItem8 = QtGui.QSpacerItem(40, 20, QtGui.QSizePolicy.Expanding, QtGui.QSizePolicy.Minimum)
        self.password_line.addItem(spacerItem8)
        self.password_label = QtGui.QLabel(self)
        self.password_label.setObjectName(_fromUtf8("password_label"))
        self.password_line.addWidget(self.password_label)
        spacerItem9 = QtGui.QSpacerItem(40, 20, QtGui.QSizePolicy.Expanding, QtGui.QSizePolicy.Minimum)
        self.password_line.addItem(spacerItem9)
        self.password_edit = QtGui.QLineEdit(self)
        self.password_edit.setObjectName(_fromUtf8("password_edit"))
        self.password_edit.setFrame(True)
        self.password_edit.setEchoMode(QtGui.QLineEdit.Password)
        self.password_line.addWidget(self.password_edit)
        spacerItem10 = QtGui.QSpacerItem(40, 20, QtGui.QSizePolicy.Expanding, QtGui.QSizePolicy.Minimum)
        self.password_line.addItem(spacerItem10)
        self.verticalLayout.addLayout(self.password_line)
        spacerItem11 = QtGui.QSpacerItem(20, 72, QtGui.QSizePolicy.Minimum, QtGui.QSizePolicy.Expanding)
        self.verticalLayout.addItem(spacerItem11)
        self.buttons_line = QtGui.QHBoxLayout()
        self.buttons_line.setObjectName(_fromUtf8("buttons_line"))
        spacerItem12 = QtGui.QSpacerItem(40, 20, QtGui.QSizePolicy.Expanding, QtGui.QSizePolicy.Minimum)
        self.buttons_line.addItem(spacerItem12)
        self.buttonBox = QtGui.QDialogButtonBox(self)
        self.buttonBox.setOrientation(QtCore.Qt.Horizontal)
        self.buttonBox.setStandardButtons(QtGui.QDialogButtonBox.Cancel|QtGui.QDialogButtonBox.Ok)
        self.buttonBox.setCenterButtons(False)
        self.buttonBox.setObjectName(_fromUtf8("buttonBox"))
        self.buttons_line.addWidget(self.buttonBox)
        self.verticalLayout.addLayout(self.buttons_line)
        spacerItem13 = QtGui.QSpacerItem(20, 40, QtGui.QSizePolicy.Minimum, QtGui.QSizePolicy.Fixed)
        self.verticalLayout.addItem(spacerItem13)
        self.buttonBox.raise_()
        self.info_label.raise_()
        self.password_label.raise_()
        self.password_edit.raise_()
        self.username_label.raise_()
        self.buttonBox.raise_()

    def retranslate_ui(self):
        self.setWindowTitle(_translate("Login", "Bulldog- Login", None))
        self.info_label.setText(_translate("Login", "To perform the desired action, please log in:", None))
        self.username_label.setText(_translate("Login", "Username:", None))
        self.password_label.setText(_translate("Login", "Password:", None))

    def connect_slots_and_signals(self):
        """
        This function will connect the slots and the signals of the dialog window to the buttons and the actions it can perform.
        :return: None
        """
        QtCore.QObject.connect(self.buttonBox, QtCore.SIGNAL(_fromUtf8("accepted()")), self.accept)
        QtCore.QObject.connect(self.buttonBox, QtCore.SIGNAL(_fromUtf8("rejected()")), self.reject)

        self.server_responded.connect(self.check_response)

        QtCore.QMetaObject.connectSlotsByName(self)

    def accept(self):
        authenticator = Thread(target=self.authenticate)
        authenticator.start()

    def check_response(self):
        """
        This function should be ran when the server has responded. Unlike the function which should be ran when the user
        clicked OK, this function should *block* the dialog. It will check the server result.
        :return: None
        """
        if self.user_id == -1:
            login_failed_popup()
        else:
            self.correct_username = self.username_edit.text()
            self.correct_password = self.password_edit.text()
            self.close()

    def authenticate(self):
        """
        This function should be ran when the user clicked ok. It will ask the server for authentication.
        :return: None
        """
        auth_data = "%s%s%s" % (self.username_edit.text(), DATA_SEP, self.password_edit.text())
        auth_msg = BDTPMessage(OPERATIONS['login'], 200, auth_data)
        self.server.send(auth_msg.pack())
        response = self.server.smart_recv()
        if response.status == STATUS_CODES['OK']:
            self.user_id = int(response.get_data())
            self.server_responded.emit()
        elif response.status == STATUS_CODES['bad data']:
            self.user_id = -1
            self.server_responded.emit()
        else:
            raise StandardError("Can't handle server response.")

SERVER_IP = "127.0.0.1"
SERVER_PORT = 8080
SERVER_ADDRESS = SERVER_IP, SERVER_PORT
DEFAULT_TIMEOUT = 2


def main():
    """
    The main function of the program. Made for debugging.
    :return: None
    """
    server = BulldogSocket()
    server.settimeout(DEFAULT_TIMEOUT)
    server.connect(SERVER_ADDRESS)

    app = QtGui.QApplication(sys.argv)

    window = LoginWindow(server)
    window.show()

    exit_code = app.exec_()

    print "The user id: ", window.user_id

    sys.exit(exit_code)

if __name__ == '__main__':
    pass
    # main()
